/*this embeds the concord algorithm for covariance estimation in R in ecl. The input is a vectorized data matrix Y of dimension n times p, where n is the number of obseravations and p is the number of variables/features, a penalization parameter lambda and error tolerance epsilon. The algorithm returns a set of reals, which is a vectorized version of the estimate. 
*/

IMPORT R;

SET OF REAL8 concordembed(set of real8 Y, integer n, integer p, real8 lambdaECL, real8 epsECL=10^(-5)) := EMBED(R)
data = matrix(Y,nrow=n,ncol=p);

custConcord1 = function(Y,omegahatinit,rmax=100,eps=10^(-5),lambda){
(omegahatcurrent = omegahatinit)
(n=dim(Y)[1])
(p=dim(Y)[2])  
(S = t(Y)%*%Y/n);
(r = 1)
(converged  = FALSE)
(maxdiff = eps/10)
while((converged == FALSE)&&(r<rmax)){
    (maxdiff = eps/10)
    (omegahatold = omegahatcurrent)
    for (i in 1:(p-1)){
    for (j in (i+1):p){
    if(i!=j){
        (x = -t(omegahatcurrent[i,!(1:p == j)])%*%(S[j,!(1:p == j)])
         - t(omegahatcurrent[j,!(1:p == i)])%*%(S[i,!(1:p == i)]))
        (omegahatcurrent[i,j] = sign(x)*max(abs(x)-(lambda/n),0))
        (omegahatcurrent[i,j] = omegahatcurrent[i,j]/(S[i,i]+S[j,j]))
        (omegahatcurrent[j,i] = omegahatcurrent[i,j])
        (maxdiff = max(maxdiff, abs(omegahatcurrent[i,j]-omegahatold[i,j])))
    }}}
for(i in 1:p)
{
    (omegahatcurrent[i,i] = -t(omegahatcurrent[i,!(1:p == i)])%*%(S[i,!(1:p == i)]) + sqrt((t(omegahatcurrent[i,!(1:p == i)])%*%(S[i,!(1:p == i)]))^2+4*S[i,i]))
    (omegahatcurrent[i,i] = omegahatcurrent[i,i]/(2*S[i,i]))
    (maxdiff = max(maxdiff, abs(omegahatcurrent[i,i]-omegahatold[i,i])))
}
if(maxdiff<eps){
converged = TRUE
}
else{
    r = r+1
}
}
return(list(Omega = omegahatcurrent,Iter = r))
}

custConcord4 = function(Y,omegahatinit,rmax=100,eps=10^(-5),lambda){
(omegahatcurrent = omegahatinit)
(n=dim(Y)[1])
(p=dim(Y)[2])  
(S = t(Y)%*%Y/n);
(r = 1)
(converged  = FALSE)
(maxdiff = eps/10)
    while((converged == FALSE)&&(r<rmax)){
    (maxdiff = eps/10)
    (omegahatold = omegahatcurrent)
    for (i in 1:(p-1)){
    for (j in (i+1):p){
    if(i!=j){
        (ri = as.matrix((Y[,i]))+(1/omegahatcurrent[i,i])*Y[,setdiff((1:p),i)]%*%omegahatcurrent[i,setdiff((1:p),i)])
        (x1 = -omegahatcurrent[i,j]*S[j,j]+(1/n)*omegahatcurrent[i,i]*t(Y[,j])%*%ri)

        (rj = as.matrix((Y[,j]))+(1/omegahatcurrent[j,j])*Y[,setdiff((1:p),j)]%*%omegahatcurrent[j,setdiff((1:p),j)])

        (x2 = -omegahatcurrent[j,i]*S[i,i]+(1/n)*omegahatcurrent[j,j]*t(Y[,i])%*%rj)
        (x = -(x1+x2))        
        (omegahatcurrent[i,j] = sign(x)*max(abs(x)-(lambda/n),0))
        (omegahatcurrent[i,j] = omegahatcurrent[i,j]/(S[i,i]+S[j,j]))
        (omegahatcurrent[j,i] = omegahatcurrent[i,j])
        (maxdiff = max(maxdiff, abs(omegahatcurrent[i,j]-omegahatold[i,j])))
    }}}
    for(i in 1:p){
                (ri = as.matrix((Y[,i]))+(1/omegahatcurrent[i,i])*Y[,setdiff((1:p),i)]%*%omegahatcurrent[i,setdiff((1:p),i)])
     (x3 = -omegahatcurrent[i,i]*S[i,i]+(1/n)*omegahatcurrent[i,i]*t(Y[,i])%*%ri)
     (omegahatcurrent[i,i] = -x3 + sqrt((x3)^2+4*S[i,i]))
     (omegahatcurrent[i,i] = omegahatcurrent[i,i]/(2*S[i,i]))
     (maxdiff = max(maxdiff, abs(omegahatcurrent[i,i]-omegahatold[i,i])))
}
if(maxdiff<eps){
converged = TRUE
}
else{
    r = r+1
}
}
return(list(Omega = omegahatcurrent,Iter = r))
}

CustomConcord <- function(Y,omegahatinit,rmax,eps,lambda){
(n=dim(Y)[1])
(p=dim(Y)[2])
if(n>=p){CONCORD = custConcord1(Y,omegahatinit,rmax,eps,lambda)}
else{CONCORD = custConcord4(Y,omegahatinit,rmax,eps,lambda)}
return(list(Omega = CONCORD$Omega,Iter = CONCORD$Iter))
}

(omegahatinit = diag(p));
rmax = 100;


trial = CustomConcord(data,omegahatinit,rmax=100,eps=epsECL,lambda=lambdaECL);
as.numeric(trial$Omega);

ENDEMBED;

Y := [-1.41475249,1.41466243,-0.79863385,1.12579407,1.07855528,-3.1365708,0.48288317,0.8198658,0.52711916,-0.23421255,-0.63047891,1.4735583,-0.44503211,-1.09844352,0.59702343,-0.59727052,-0.05051723,-0.69952651,1.50914881,1.3671432,-2.16315909,1.09033166,-0.21520686,-0.30390093,0.77522201,0.79689043,2.4941717,0.63806628,-1.411043,-0.25541184,-0.10112761,-1.88456688,-1.05488273,1.01183449,-2.17456631,0.44158509,-0.03275438,-2.04577276,0.03264061,1.99558394,-0.3767668,-0.23536897,-1.48947529,2.24071624,-0.4698244,-1.86652102,-0.78334625,-0.87179585,-0.97585532,-1.35569894,0.31895739,2.59777697,0.64794126,-2.72715187,0.04755478,-0.25526243,0.15658456,-0.94849606,-0.09590263,-1.39379704,0.96481106,-0.37074597,2.1929305,-0.03708266,-1.21552136,1.26525572,-0.25180985,0.77405663,-1.01418833,2.57901465,-2.09679017,1.4662929,1.21158671,-0.34104358,0.57568564,0.70572011,1.64041032,-0.04122645,-0.65001117,-1.08784992,2.63788594,0.82868602,1.53273536,-0.33957508,-0.51342557,-2.38753443,-0.51002291,-1.57187635,0.28238058,-0.63762294,1.05197489,1.76835968,0.33911894,-1.77157082,1.72017505,2.36880812,-0.62195704,-0.674248,1.67882197,1.16103458,0.53081737,-0.27046652,-2.96614302,-1.75349413,-1.43327408,-0.21945592,0.18829463,0.46449005,1.91147547,-2.51517658,-1.27387704,-0.73782262,-0.04296264,1.47573109,0.85266802,-0.57549108,-0.45860908,-2.0446762,0.79559452,1.83723905,-0.05576841,0.43412732,-0.66830601,0.69434856,0.28338356,-0.35216934,-0.04256768,-1.18345715,1.31257972,2.00454734,0.27403309,1.07270652,-2.54893258,-0.58321069,-0.57483895,0.39706665,-2.27975416,-0.34913452,0.84336488,1.52624551,-1.88882158,-1.80392141,-2.17977323,0.85345658,1.17461634,0.4366248,0.31725804,3.02169479,-3.06929154,-0.304033];
//implementing concord with data = Y as above, n = 15, p = 10, tolerance of 10^(-5) and lambda = 10
concordembed(Y,15,10,10,10^(-5));

Y1 :=[0.998943954313776,3.63096486923567,2.18507040813445,-0.788802107535257,-0.666189124936764,0.796271528962227,2.09842986150302,0.802059268278962,-2.19436566029379,0.432472635909099,-2.22537689855102,-0.177475748921292,-1.3707169448559,-0.0109328070273617,-1.32214901434832,-2.09649404996235,0.673517569650043,0.635494349055357,0.559500829816843,-0.0190359440852172,1.62661784328862,-0.722126775022532,2.53893525898793,2.61891902620765,-0.29827256404924,1.50132072880843,1.39416407144141,-0.825288418583153,-0.860205119507516,0.556675247019494,2.6045011116355,-2.95477106838964,0.436637859018377,0.0708194786751329,0.868270264937385,-1.00338798823943,2.00219257708796,1.80280224228332,-1.88291796814682,0.437467961021945,1.07829425712637,-1.14147241254645,-0.875719346280987,-1.29297734898798,-2.1753427282011,0.156601183830627,-1.34129969936667,2.75797173323616,-0.394578484397414,0.996047106582104,-0.08344279804386,2.21240871700189,1.56684389057031,-0.483021652509732,1.19401892335371,0.601467281607222,0.0817385168979912,-3.42933612359591,-0.812969694972445,0.213705789792429,-2.13428396284165,0.629461276770875,-1.32467539471197,-0.341937556239148,0.0970540611954437,2.16979298271282,1.2903825160034,-1.01744637367631,-0.9791120539919,-0.294046721583578,-1.02367762167069,0.58428469409793,-1.50447568109489,-0.598902133360223,-0.474931123280161,-0.0621246206793903,-0.459252630060647,-2.50122982543273,-2.65851644423804,0.981376451307749,1.46575701296796,0.0181503578473807,-1.04255279719372,-0.624474299791548,-3.19201437517637,-2.51239173832022,-0.482657166753838,1.54742399266407,-2.00517490192334,-0.227673255083082,1.38100844764595,-1.1041949933717,2.57999552926892,1.67654984093744,1.09997172986496,0.739460557051995,-2.13465095283076,-1.36024978586159,1.33056778650261,-4.40256220018429,0.776589228073486,0.874754561336968,-1.25268471344536,-1.33195092075674,0.40691663468823,-0.67629492472683,-0.5412209968824,-0.765009700461545,1.76728241491883,0.0691449121311312,0.834607166021463,0.220839928148592,-2.18745780981169,3.61500930584669,2.82891321781154,1.85528152241314,0.317269327363701,1.2637088749515,1.55566461330346,-2.16485953512588,3.08911094701758,0.319198808750906,-1.64799150637995,0.661609585041286,2.38675474784196,0.494416242185583,-0.379923812179594,-1.57431637942844,1.76057735041278,0.391259661835344,1.49542306125754,-2.64068498015207,-2.2549173858305,-0.243350141020371,-0.356855160442106,1.94383632577762,0.927785787323999,-1.65516169678256,2.2886418565286,0.940255295918972,0.612047160240295,2.25822596910937,1.80994216711722,0.686760609184545,1.52038197826408,1.23111889846813,1.32987009104632,-0.61883939831086,-0.785697945786924,0.0939346712387189,-5.05546764517655,0.326975184102944,1.21382078302362,-0.511178270644497,1.18938290069333,2.43704300592345,1.97005835893559,3.44538813420044,-0.183555674045208,-0.34207080912866,-1.06329840452845,-0.232601223712719,-0.238885223803078,0.612148709566343,-1.10258943426498,-1.4770116150184,-2.77046999922697,0.36974173966369,2.5212036291962,2.13120651554766,0.414208822736385,1.60836009053156,1.73181865526536,0.29770323287959,-0.979175028772199,0.12515591479662,0.85082783555518,2.42355454504705,-0.340321560332475,-1.91745802958903,-0.767764509212832,1.99031813783808,0.0411166908290417,-1.02934927978786,0.577826531390877,-0.72817191438509,0.0807845230690016,-0.683408376231757,-0.909440216352482,0.315876448249186,0.523947923642044,0.113690204526024,-3.36051372943108,-0.611386402846539,1.74338603706719,2.0638430053327,2.5193436336375,0.577061845448713,-0.560963038977391,0.331371401637143,-0.278140045380831,-0.942176755589429,-1.28252847145205,0.818375030256935,-1.62517856394491,2.75129771520125,-1.39787007267642,0.505859925820023,0.430294740782362,-0.446468199428527];

//implementing concord with data = Y as above, n = 7, p = 30, tolerance of 10^(-5) and lambda = 5
concordembed(Y1,7,30,5,10^(-5));

